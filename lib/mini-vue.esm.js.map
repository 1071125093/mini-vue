{"version":3,"file":"mini-vue.esm.js","sources":["../src/shared/shapeFlags.ts","../src/runtime-core/createVNode.ts","../src/runtime-core/h.ts","../src/runtime-core/component.ts","../src/runtime-core/render-api/index.ts","../src/runtime-core/renderer.ts","../src/runtime-core/createApp.ts"],"sourcesContent":["// 组件的类型\nexport const enum ShapeFlags {\n    // 最后要渲染的 element 类型\n    ELEMENT = 1,\n    // 组件类型\n    STATEFUL_COMPONENT = 1 << 2,\n    // vnode 的 children 为 string 类型\n    TEXT_CHILDREN = 1 << 3,\n    // vnode 的 children 为数组类型\n    ARRAY_CHILDREN = 1 << 4,\n  }\n  ","import { ShapeFlags } from \"../shared\";\n\nexport const createVNode = function (\n  type: any,\n  props?: any,\n  children?: string | Array<any>\n) {\n  // 注意 type 有可能是 string 也有可能是对象\n  // 如果是对象的话，那么就是用户设置的 options\n  // type 为 stirng 的时候\n  // createVNode(\"div\")\n  // type 为组件对象的时候\n  // createVNode(App)\n  const vnode = {\n    el: null,\n    component:null,\n    type,\n    props,\n    children,\n    shapeFlag: getShapeFlag(type),\n  };\n\n  // 基于 children 再次设置 shapeFlag\n  if (Array.isArray(children)) {\n    vnode.shapeFlag |= ShapeFlags.ARRAY_CHILDREN;\n  } else if (typeof children === \"string\") {\n    vnode.shapeFlag |= ShapeFlags.TEXT_CHILDREN;\n  }\n\n  return vnode;\n};\n\n// 基于 type 来判断是什么类型的组件\nfunction getShapeFlag(type: any) {\n  return typeof type === \"string\"\n    ? ShapeFlags.ELEMENT\n    : ShapeFlags.STATEFUL_COMPONENT;\n}\n","import { createVNode } from \"./createVNode\";\nexport const h = (type: string, props: any, children: string | Array<any>) => {\n  return createVNode(type,props,children);\n};\n","export function createComponentInstance(vnode) {\n  const instance = {\n    type: vnode.type,\n    vnode,\n    props: {},\n    proxy: null,\n  };\n\n  return instance;\n}\n","// 源码里面这些接口是由 runtime-dom 来实现\n// 这里先简单实现\n// 后面也修改成和源码一样的实现\nexport function hostCreateElement(type) {\n  console.log(\"hostCreateElement\", type);\n  const element = document.createElement(type);\n  return element;\n}\n\nexport function hostSetElementText(el, text) {\n  console.log(\"hostSetElementText\", el, text);\n  el.innerText = text;\n}\n\nexport function hostPatchProp(el, key, preValue, nextValue) {\n  // preValue 之前的值\n  // 为了之后 update 做准备的值\n  // nextValue 当前的值\n\n  console.log(`hostPatchProp 设置属性:${key} 值:${nextValue}`);\n  \n  switch (key) {\n    case \"tId\":\n      el.setAttribute(key, nextValue);\n      break;\n  }\n}\n\nexport function hostInsert(el, container) {\n  console.log(\"hostInsert\");\n  container.append(el);\n}\n","import { ShapeFlags } from \"../shared\";\nimport { createComponentInstance } from \"./component\";\nimport {\n  hostCreateElement,\n  hostSetElementText,\n  hostPatchProp,\n  hostInsert,\n} from \"./render-api\";\nimport { h } from \"./h\";\n\nexport const render = (vnode, container) => {\n  console.log(\"调用 patch\");\n  patch(null, vnode, container);\n};\n\nfunction patch(n1, n2, container) {\n  // 基于 n2 的类型来判断\n  // 因为 n2 是新的 vnode\n  const { type, shapeFlag } = n2;\n  switch (type) {\n    case \"text\":\n      // todo\n      break;\n    // 其中还有几个类型比如： static fragment comment\n\n    default:\n      // 这里就基于 shapeFlag 来处理\n      if (shapeFlag & ShapeFlags.ELEMENT) {\n        console.log(\"处理 element\");\n        processElement(n1, n2, container);\n      } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {\n        console.log(\"处理 component\");\n        processComponent(n1, n2, container);\n      }\n  }\n}\n\nfunction processElement(n1, n2, container) {\n  if (!n1) {\n    mountElement(n2, container);\n  } else {\n    // todo\n    // updateElement()\n  }\n}\n\nfunction mountElement(vnode, container) {\n  const { shapeFlag, props } = vnode;\n  // 1. 先创建 element\n  // 基于可扩展的渲染 api\n  const el = (vnode.el = hostCreateElement(vnode.type));\n\n  // 支持单子组件和多子组件的创建\n  if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\n    // 举个栗子\n    // render(){\n    //     return h(\"div\",{},\"test\")\n    // }\n    // 这里 children 就是 test ，只需要渲染一下就完事了\n    console.log(`处理文本:${vnode.children}`);\n    hostSetElementText(el, vnode.children);\n  } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n    // 举个栗子\n    // render(){\n    // Hello 是个 component\n    //     return h(\"div\",{},[h(\"p\"),h(Hello)])\n    // }\n    // 这里 children 就是个数组了，就需要依次调用 patch 递归来处理\n    mountChildren(vnode.children, el);\n  }\n\n  // 处理 props\n  if (props) {\n    for (const key in props) {\n      // todo\n      // 需要过滤掉vue自身用的key\n      // 比如生命周期相关的 key: beforeMount、mounted\n      const nextVal = props[key];\n      hostPatchProp(el, key, null, nextVal);\n    }\n  }\n\n  // todo\n  // 触发 beforeMount() 钩子\n  console.log(\"vnodeHook  -> onVnodeBeforeMount\");\n  console.log(\"DirectiveHook  -> beforeMount\");\n  console.log(\"transition  -> beforeEnter\");\n\n  // 插入\n  hostInsert(el, container);\n\n  // todo\n  // 触发 mounted() 钩子\n  console.log(\"vnodeHook  -> onVnodeMounted\");\n  console.log(\"DirectiveHook  -> mounted\");\n  console.log(\"transition  -> enter\");\n}\n\nfunction mountChildren(children, container) {\n  children.forEach((VNodeChild) => {\n    // todo\n    // 这里应该需要处理一下 vnodeChild\n    // 因为有可能不是 vnode 类型\n    console.log(\"mountChildren:\", VNodeChild);\n    patch(null, VNodeChild, container);\n  });\n}\n\nfunction processComponent(n1, n2, container) {\n  // 如果 n1 没有值的话，那么就是 mount\n  if (!n1) {\n    // 初始化 component\n    mountComponent(n2, container);\n  } else {\n    // todo\n    // updateComponent()\n  }\n}\n\nfunction mountComponent(initialVNode, container) {\n  // 1. 先创建一个 component instance\n  const instance = (initialVNode.component = createComponentInstance(\n    initialVNode\n  ));\n  console.log(`创建组件实例:${instance.type.name}`);\n  // 2. 给 instance 加工加工\n  setupComponent(instance);\n\n  setupRenderEffect(instance, container);\n}\n\nfunction setupComponent(instance) {\n  // 1. 处理 props\n  initProps();\n  // 2. 处理 slots\n  initSlots();\n\n  // 源码里面有两种类型的 component\n  // 一种是基于 options 创建的\n  // 还有一种是 function 的\n  // 这里处理的是 options 创建的\n  // 叫做 stateful 类型\n  setupStatefulComponent(instance);\n}\n\nfunction initProps() {\n  // todo\n  console.log(\"initProps\");\n}\n\nfunction initSlots() {\n  // todo\n  console.log(\"initSlots\");\n}\n\nfunction setupStatefulComponent(instance) {\n  // todo\n  // 1. 先创建代理 proxy\n  console.log(\"创建 proxy\");\n  // 2. 调用 setup\n  // todo\n  // 应该传入 props 和 setupContext\n  const setupResult = instance.setup && instance.setup(instance.props);\n\n  // 3. 处理 setupResult\n  handleSetupResult(instance, setupResult);\n}\n\nfunction handleSetupResult(instance, setupResult) {\n  // setup 返回值不一样的话，会有不同的处理\n  // 1. 看看 setupResult 是个什么\n  if (typeof setupResult === \"function\") {\n    // 如果返回的是 function 的话，那么绑定到 render 上\n    // 认为是 render 逻辑\n    // setup(){ return ()=>(h(\"div\")) }\n    instance.render = setupResult;\n  } else if (typeof setupResult === \"object\") {\n    // 返回的是一个对象的话\n    // 先存到 setupState 上\n    instance.setupState = setupResult;\n  }\n\n  finishComponentSetup(instance);\n}\n\nfunction finishComponentSetup(instance) {\n  // 给 instance 设置 render\n\n  // 先取到用户设置的 component options\n  const Component = instance.type;\n\n  if (!instance.render) {\n    // todo\n    // 调用 compile 模块来编译 template\n    // Component.render = compile(Component.template, {\n    //     isCustomElement: instance.appContext.config.isCustomElement || NO\n    //   })\n  }\n\n  instance.render = Component.render;\n\n  // applyOptions()\n}\n\nfunction applyOptions() {\n  // 兼容 vue2.x\n  // todo\n}\n\nfunction setupRenderEffect(instance, container) {\n  // 源码里面是直接调用了 reactivity\n  // 因为这次只处理初始化逻辑\n  // 所以暂时用不到\n  // 后面这里是作为 update 的主要逻辑\n\n  // 调用 render\n  // 应该传入 ctx 也就是 proxy\n  // ctx 可以选择暴露给用户的 api\n  // 源代码里面是调用的 renderComponentRoot 函数\n  // 这里为了简化直接调用 render\n  console.log(\"调用 render,获取 subTree\");\n  const subTree = instance.render(instance.proxy);\n  console.log(\"subTree\", subTree);\n\n  // todo\n  console.log(`${instance.type.name}:触发 beforeMount hook`);\n  console.log(`${instance.type.name}:触发 onVnodeBeforeMount hook`);\n\n  // 这里基于 subTree 再次调用 patch\n  // 基于 render 返回的 vnode ，再次进行渲染\n  // 这里我把这个行为隐喻成开箱\n  // 一个组件就是一个箱子\n  // 里面有可能是 element （也就是可以直接渲染的）\n  // 也有可能还是 component\n  // 这里就是递归的开箱\n  // 而 subTree 就是当前的这个箱子（组件）装的东西\n  // 箱子（组件）只是个概念，它实际是不需要渲染的\n  // 要渲染的是箱子里面的 subTree\n  patch(null, subTree, container);\n\n  console.log(`${instance.type.name}:触发 mounted hook`);\n}\n","import { render } from \"./renderer\";\nimport { createVNode } from \"./createVNode\";\n\n// createApp\n// 在 vue3 里面 createApp 是属于 renderer 对象的\n// 而 renderer 对象需要创建\n// 这里我们暂时不实现\n\nexport const createApp = (rootComponent) => {\n  const app = {\n    _component: rootComponent,\n    _container: null,\n    mount(rootContainer) {\n      console.log(\"基于根组件创建 vnode\");\n      const vnode = createVNode(rootComponent);\n      app._container = rootContainer;\n      console.log(\"调用 render，基于 vnode 进行开箱\");\n      render(vnode, rootContainer);\n    },\n  };\n\n  return app;\n};\n"],"names":[],"mappings":"AACA,IAAkB,UASf;AATH,WAAkB,UAAU;IAExB,iDAAW,CAAA;IAEX,uEAA2B,CAAA;IAE3B,6DAAsB,CAAA;IAEtB,gEAAuB,CAAA;AACzB,CAAC,EATe,UAAU,KAAV,UAAU;;ACCrB,IAAM,WAAW,GAAG,UACzB,IAAS,EACT,KAAW,EACX,QAA8B;IAQ9B,IAAM,KAAK,GAAG;QACZ,EAAE,EAAE,IAAI;QACR,SAAS,EAAC,IAAI;QACd,IAAI,MAAA;QACJ,KAAK,OAAA;QACL,QAAQ,UAAA;QACR,SAAS,EAAE,YAAY,CAAC,IAAI,CAAC;KAC9B,CAAC;IAGF,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC,cAAc,CAAC;KAC9C;SAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QACvC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC,aAAa,CAAC;KAC7C;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAGF,SAAS,YAAY,CAAC,IAAS;IAC7B,OAAO,OAAO,IAAI,KAAK,QAAQ;UAC3B,UAAU,CAAC,OAAO;UAClB,UAAU,CAAC,kBAAkB,CAAC;AACpC;;ICpCa,CAAC,GAAG,UAAC,IAAY,EAAE,KAAU,EAAE,QAA6B;IACvE,OAAO,WAAW,CAAC,IAAI,EAAC,KAAK,EAAC,QAAQ,CAAC,CAAC;AAC1C;;SCHgB,uBAAuB,CAAC,KAAK;IAC3C,IAAM,QAAQ,GAAG;QACf,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,KAAK,OAAA;QACL,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,IAAI;KACZ,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB;;SCNgB,iBAAiB,CAAC,IAAI;IACpC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACvC,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7C,OAAO,OAAO,CAAC;AACjB,CAAC;SAEe,kBAAkB,CAAC,EAAE,EAAE,IAAI;IACzC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IAC5C,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,CAAC;SAEe,aAAa,CAAC,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS;IAKxD,OAAO,CAAC,GAAG,CAAC,4CAAsB,GAAG,gBAAM,SAAW,CAAC,CAAC;IAExD,QAAQ,GAAG;QACT,KAAK,KAAK;YACR,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YAChC,MAAM;KACT;AACH,CAAC;SAEe,UAAU,CAAC,EAAE,EAAE,SAAS;IACtC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC1B,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACvB;;ACrBO,IAAM,MAAM,GAAG,UAAC,KAAK,EAAE,SAAS;IACrC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxB,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,SAAS,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS;IAGtB,IAAA,IAAI,GAAgB,EAAE,KAAlB,EAAE,SAAS,GAAK,EAAE,UAAP,CAAQ;IAC/B,QAAQ,IAAI;QACV,KAAK,MAAM;YAET,MAAM;QAGR;YAEE,IAAI,SAAS,GAAG,UAAU,CAAC,OAAO,EAAE;gBAClC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC1B,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;aACnC;iBAAM,IAAI,SAAS,GAAG,UAAU,CAAC,kBAAkB,EAAE;gBACpD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC5B,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;aACrC;KACJ;AACH,CAAC;AAED,SAAS,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS;IACvC,IAAI,CAAC,EAAE,EAAE;QACP,YAAY,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAI7B;AACH,CAAC;AAED,SAAS,YAAY,CAAC,KAAK,EAAE,SAAS;IAC5B,IAAA,SAAS,GAAY,KAAK,UAAjB,EAAE,KAAK,GAAK,KAAK,MAAV,CAAW;IAGnC,IAAM,EAAE,IAAI,KAAK,CAAC,EAAE,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAGtD,IAAI,SAAS,GAAG,UAAU,CAAC,aAAa,EAAE;QAMxC,OAAO,CAAC,GAAG,CAAC,8BAAQ,KAAK,CAAC,QAAU,CAAC,CAAC;QACtC,kBAAkB,CAAC,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;KACxC;SAAM,IAAI,SAAS,GAAG,UAAU,CAAC,cAAc,EAAE;QAOhD,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;KACnC;IAGD,IAAI,KAAK,EAAE;QACT,KAAK,IAAM,GAAG,IAAI,KAAK,EAAE;YAIvB,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,aAAa,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACvC;KACF;IAID,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAChD,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IAC7C,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAG1C,UAAU,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAI1B,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;IAC5C,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IACzC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACtC,CAAC;AAED,SAAS,aAAa,CAAC,QAAQ,EAAE,SAAS;IACxC,QAAQ,CAAC,OAAO,CAAC,UAAC,UAAU;QAI1B,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QAC1C,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;KACpC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS;IAEzC,IAAI,CAAC,EAAE,EAAE;QAEP,cAAc,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAI/B;AACH,CAAC;AAED,SAAS,cAAc,CAAC,YAAY,EAAE,SAAS;IAE7C,IAAM,QAAQ,IAAI,YAAY,CAAC,SAAS,GAAG,uBAAuB,CAChE,YAAY,CACb,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,0CAAU,QAAQ,CAAC,IAAI,CAAC,IAAM,CAAC,CAAC;IAE5C,cAAc,CAAC,QAAQ,CAAC,CAAC;IAEzB,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACzC,CAAC;AAED,SAAS,cAAc,CAAC,QAAQ;IAE9B,SAAS,EAAE,CAAC;IAEZ,SAAS,EAAE,CAAC;IAOZ,sBAAsB,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC;AAED,SAAS,SAAS;IAEhB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAC3B,CAAC;AAED,SAAS,SAAS;IAEhB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAC3B,CAAC;AAED,SAAS,sBAAsB,CAAC,QAAQ;IAGtC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAIxB,IAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAGrE,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,iBAAiB,CAAC,QAAQ,EAAE,WAAW;IAG9C,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;QAIrC,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAC;KAC/B;SAAM,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QAG1C,QAAQ,CAAC,UAAU,GAAG,WAAW,CAAC;KACnC;IAED,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AACjC,CAAC;AAED,SAAS,oBAAoB,CAAC,QAAQ;IAIpC,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;IAEhC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAMrB;IAED,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AAGrC,CAAC;AAOD,SAAS,iBAAiB,CAAC,QAAQ,EAAE,SAAS;IAW5C,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IACpC,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChD,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAGhC,OAAO,CAAC,GAAG,CAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,mCAAsB,CAAC,CAAC;IACzD,OAAO,CAAC,GAAG,CAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,0CAA6B,CAAC,CAAC;IAYhE,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAEhC,OAAO,CAAC,GAAG,CAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,+BAAkB,CAAC,CAAC;AACvD;;ICzOa,SAAS,GAAG,UAAC,aAAa;IACrC,IAAM,GAAG,GAAG;QACV,UAAU,EAAE,aAAa;QACzB,UAAU,EAAE,IAAI;QAChB,KAAK,YAAC,aAAa;YACjB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC7B,IAAM,KAAK,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC;YACzC,GAAG,CAAC,UAAU,GAAG,aAAa,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SAC9B;KACF,CAAC;IAEF,OAAO,GAAG,CAAC;AACb;;;;"}